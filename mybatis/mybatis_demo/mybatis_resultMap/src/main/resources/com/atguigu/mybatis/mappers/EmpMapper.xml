<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.mappers.EmpMapper">

    <!--
    若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性
名符合Java的规则（使用驼峰）
通过以下两种方式处理字段名和实体类中的属性的映射关系
a>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致
select emp_id empId, emp_name empName, age, gender from t_emp where emp_id = #{empId}
b>可以在MyBatis的核心配置文件中设置一个全局配置信息mapUnderscoreToCamelCase，可
以在查询表中数据时，自动将_类型的字段名转换为驼峰

    -->
<!--    Emp getEmpByEmpId(@Param("empId") Integer empId);-->
<!--    <select id="getEmpByEmpId" resultType="Emp">-->
<!--        select * from t_emp where emp_id = #{empId}-->
<!--    </select>-->

    <!--
    若字段名和实体类中的属性名不一致，且差异不仅是_和驼峰的区别，则用resultMap
    -->
    <!--    Emp getEmpByEmpId(@Param("empId") Integer empId);-->
    <resultMap id="empResultMap" type="Emp">
        <id column="emp_id" property="empId"></id>
        <result column="emp_name" property="empName"></result>
        <result column="age" property="age"></result>
        <result column="gender" property="gender"></result>
    </resultMap>
    <select id="getEmpByEmpId" resultMap="empResultMap">
        select * from t_emp where emp_id = #{empId}
    </select>

<!--    Emp getEmpAndDeptByEmpId(@Param("empId") Integer empId);-->

    <resultMap id="empAndDept" type="Emp">
        <id column="emp_id" property="empId"></id>
        <result column="emp_name" property="empName"></result>
        <result column="age" property="age"></result>
        <result column="gender" property="gender"></result>
        <result column="dept_id" property="dept.deptId"></result>
        <result column="dept_name" property="dept.deptName"></result>
    </resultMap>
    <select id="getEmpAndDeptByEmpId" resultMap="empAndDept">
        select t_emp.*, t_dept.dept_name from t_emp left join t_dept on t_emp.emp_id = t_dept.dept_id where t_emp.emp_id = #{empId}
    </select>
</mapper>